{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","employees","copy","keys","sortLastName","sort","a","b","lastNameA","name","last","lastNameB","setState","sortByID","ids","idA","login","salt","idB","filterFemales","females","filter","employee","gender","filterMales","males","removeFilters","fetch","then","response","json","results","className","type","onClick","this","map","key","scope","first","email","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86b663ea.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n//create a copy of the original list to show on ui\nexport default class App extends Component {\n  state = {\n    employees: [],\n    copy: [],\n    keys: [\"ID\", \"First Name\", \"Last Name\", \"Email\"]\n  };\n    \n  //get data from random user api\n  componentDidMount() {\n      const data = fetch(\"https://randomuser.me/api/?results=50\");\n\n      data.then((response) => response.json())\n      .then((response) => {\n          this.setState({employees: response.results, copy: response.results});\n          //console.log(response.results)\n      })\n  }\n\n  sortLastName = () => {\n    let employees = this.state.employees;\n    employees.sort((a, b) => {\n      let lastNameA = a.name.last;\n      let lastNameB = b.name.last;\n      if (lastNameA < lastNameB) {\n        return -1;\n      }\n      if (lastNameA > lastNameB) {\n        return 1;\n      }\n      return 0;\n    })\n    this.setState({employees})\n  }\n\n  sortByID = () => {\n    let ids = this.state.employees;\n    ids.sort((a, b) => {\n      let idA = a.login.salt;\n      let idB = b.login.salt;\n      if (idA < idB) {\n        return -1;\n      } \n      if (idA > idB) {\n        return 1;\n      }\n      return 0;\n    })\n    this.setState({employees: ids})\n  }\n\nfilterFemales = () => {\n  let employees = this.state.copy;\n  let females = employees.filter((employee) => employee.gender === \"female\")\n  //console.log(females)\n  this.setState({copy: females})\n}\nfilterMales = () => {\n  let employees = this.state.copy;\n  let males = employees.filter((employee) => employee.gender === \"male\")\n  //console.log(males)\n  this.setState({copy: males})\n}\n\nremoveFilters = () => {\n  let employees = this.state.employees;\n  this.setState({copy: employees})\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"welcome\">Welcome to the Employee Directory</h1>\n          <h3 className=\"directions\">Use the buttons below to sort or filter the employees.</h3>\n          <div>\n            <button type=\"button\" className=\"btn btn-primary filter\" onClick={this.sortLastName}>Sort by Last Name</button>\n            <button type=\"button\" className=\"btn btn-danger filter\" onClick={this.sortByID}>Sort by ID</button>\n            <button type=\"button\" className=\"btn btn-success filter\" onClick={this.filterFemales}>Show Females Only</button>\n            <button type=\"button\" className=\"btn btn-warning filter\" onClick={this.filterMales}>Show Males Only</button>\n            <button type=\"button\" className=\"btn btn-dark filter\" onClick={this.removeFilters}>Remove Filters</button>\n          </div>  \n        </header>\n        <table className=\"table\">\n          <thead className=\"thead\">\n              <tr>\n                {this.state.keys.map((key) => \n                  (\n                    <th scope=\"col\" key={key}>{key}</th>\n                  )\n                )}\n              </tr>\n          </thead>\n          <tbody>\n              {this.state.copy.map((employee) => (\n                  <tr key={employee.login.salt}>\n                      <th scope=\"row\" key={employee.login.salt}>{employee.login.salt}</th>\n                          <td key={employee.name.first}>{employee.name.first}</td>\n                          <td key={employee.name.last}>{employee.name.last}</td>\n                          <td key={employee.email}>{employee.email}</td>\n                  </tr>\n              ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}